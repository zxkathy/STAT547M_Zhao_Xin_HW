boot_coef_B <-
boot_c_B <- as.data.frame(matrix(NA, nrow = 0, ncol = 2))
b <- 0
b_continue <- TRUE
while (b_continue) {
b <- b + 1
set.seed(b * j)
boot_df <- df[sample(1:n, n, replace = TRUE), ]
boot_fit <- tryCatch({
glm(y ~ x, data = boot_df, family = binomial)
},
error = function(e) {
cat("Bootstrap", b, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("Bootstrap", b, "did not converge, set to NA...\n")
NA
})
if (typeof(boot_fit) == "list") {
boot_coef_B[NROW(boot_coef_B) + 1,] <- coef(boot_fit)
}
if (NROW(boot_coef_B) >= B) {
b_continue <- FALSE
}
}
#detect outlier and remove outlier
boot_cur_row <- nrow(boot_coef)
upper_beta0 <-
mean(boot_coef_B[, 1]) + 2.5 * sqrt(var(boot_coef_B[, 1]))
lower_beta0 <-
mean(boot_coef_B[, 1]) - 2.5 * sqrt(var(boot_coef_B[, 1]))
upper_beta1 <-
mean(boot_coef_B[, 2]) + 2.5 * sqrt(var(boot_coef_B[, 2]))
lower_beta1 <-
mean(boot_coef_B[, 2]) - 2.5 * sqrt(var(boot_coef_B[, 2]))
index <- intersect(which(
(boot_coef_B[, 1] <= upper_beta0) &
(boot_coef_B[, 1] >= lower_beta0)
),
which(
(boot_coef_B[, 2] <= upper_beta1) &
(boot_coef_B[, 2] >= lower_beta1)
))
boot_c_B <- boot_coef_B[index, ]
if (length(index) >= B_0) {
for (b_nbeta in 1:length(coef(fit))) {
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] <-
mean(boot_c_B[1:B_0, b_nbeta])
boot_coef[boot_cur_row + 1, 2 * b_nbeta] <-
sqrt(var(boot_c_B[1:B_0, b_nbeta]))
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.025)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] -
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.975)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] +
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta] <-
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <= nbeta / 10) &&
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] >= nbeta / 10)
}
}
}
cat("MLE", nrow(mle_coef), "finished.\n")
if (nrow(mle_coef) >= k) {
mle_continue <- FALSE
}
}
}
colSums(mle_ci_incl[, c(3, 6)]) / k
colSums(boot_ci_incl[, c(3, 6)]) / k
n <- 20
k <- 200
beta0 <- 0.1
beta1 <- 0.2
B <- 110
B_0 <- 100
z <- qnorm(0.975)
mle_ci_incl <-
boot_ci_incl <- as.data.frame(matrix(NA, nrow = 0, ncol = 6))
names(mle_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
names(boot_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
mle_coef <-
boot_coef <-
as.data.frame(matrix(NA, nrow = 0, ncol = 4))
names(mle_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
names(boot_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
true_betas <-  as.data.frame(matrix(c(rep(0.1, k),
rep(0.2, k)), nrow = k, ncol=2))
j <- 0
mle_continue <- TRUE
while (mle_continue) {
j = j + 1
cat("MLE", j, "the run starting.\n")
set.seed(j*37)
x <- rnorm(n)
p <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- c()
for (i in 1:n) {
set.seed(i)
y[i] <- rbinom(1, 1, p[i])
}
df <- data.frame(x, y)
fit <- tryCatch({
glm(y ~ x, data = df, family = binomial)
},
error = function(e) {
cat("MLE", j, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("MLE", j, "did not converge, set to NA...\n")
NA
})
if (typeof(fit) == "list") {
cur_row <- nrow(mle_coef)
for (nbeta in 1:length(coef(fit))) {
mle_coef[cur_row + 1, 2 * nbeta - 1] <- coef(fit)[nbeta]
mle_coef[cur_row + 1, 2 * nbeta] <-
summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <- summary(fit)$coefficients[nbeta, 1] -
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 1] <- summary(fit)$coefficients[nbeta, 1] +
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta] <-
(mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <= nbeta / 10) &&
(mle_ci_incl[cur_row + 1, 3 * nbeta - 1] >= nbeta / 10)
}
while (nrow(mle_coef) > nrow(boot_coef)) {
boot_coef_B <-
boot_c_B <- as.data.frame(matrix(NA, nrow = 0, ncol = 2))
b <- 0
b_continue <- TRUE
while (b_continue) {
b <- b + 1
set.seed(b * j)
boot_df <- df[sample(1:n, n, replace = TRUE), ]
boot_fit <- tryCatch({
glm(y ~ x, data = boot_df, family = binomial)
},
error = function(e) {
cat("Bootstrap", b, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("Bootstrap", b, "did not converge, set to NA...\n")
NA
})
if (typeof(boot_fit) == "list") {
boot_coef_B[NROW(boot_coef_B) + 1,] <- coef(boot_fit)
}
if (NROW(boot_coef_B) >= B) {
b_continue <- FALSE
}
}
#detect outlier and remove outlier
boot_cur_row <- nrow(boot_coef)
upper_beta0 <-
mean(boot_coef_B[, 1]) + 2.5 * sqrt(var(boot_coef_B[, 1]))
lower_beta0 <-
mean(boot_coef_B[, 1]) - 2.5 * sqrt(var(boot_coef_B[, 1]))
upper_beta1 <-
mean(boot_coef_B[, 2]) + 2.5 * sqrt(var(boot_coef_B[, 2]))
lower_beta1 <-
mean(boot_coef_B[, 2]) - 2.5 * sqrt(var(boot_coef_B[, 2]))
index <- intersect(which(
(boot_coef_B[, 1] <= upper_beta0) &
(boot_coef_B[, 1] >= lower_beta0)
),
which(
(boot_coef_B[, 2] <= upper_beta1) &
(boot_coef_B[, 2] >= lower_beta1)
))
boot_c_B <- boot_coef_B[index, ]
if (length(index) >= B_0) {
for (b_nbeta in 1:length(coef(fit))) {
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] <-
mean(boot_c_B[1:B_0, b_nbeta])
boot_coef[boot_cur_row + 1, 2 * b_nbeta] <-
sqrt(var(boot_c_B[1:B_0, b_nbeta]))
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.025)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] -
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.975)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] +
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta] <-
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <= nbeta / 10) &&
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] >= nbeta / 10)
}
}
}
cat("MLE", nrow(mle_coef), "finished.\n")
if (nrow(mle_coef) >= k) {
mle_continue <- FALSE
}
}
}
j%10
j%%10
n <- 20
k <- 200
beta0 <- 0.1
beta1 <- 0.2
B <- 110
B_0 <- 100
z <- qnorm(0.975)
mle_ci_incl <-
boot_ci_incl <- as.data.frame(matrix(NA, nrow = 0, ncol = 6))
names(mle_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
names(boot_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
mle_coef <-
boot_coef <-
as.data.frame(matrix(NA, nrow = 0, ncol = 4))
names(mle_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
names(boot_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
true_betas <-  as.data.frame(matrix(c(rep(0.1, k),
rep(0.2, k)), nrow = k, ncol=2))
j <- 0
mle_continue <- TRUE
while (mle_continue) {
j = j + 1
cat("MLE", j, "the run starting.\n")
set.seed(j%%10)
x <- rnorm(n)
p <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- c()
for (i in 1:n) {
set.seed(i)
y[i] <- rbinom(1, 1, p[i])
}
df <- data.frame(x, y)
fit <- tryCatch({
glm(y ~ x, data = df, family = binomial)
},
error = function(e) {
cat("MLE", j, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("MLE", j, "did not converge, set to NA...\n")
NA
})
if (typeof(fit) == "list") {
cur_row <- nrow(mle_coef)
for (nbeta in 1:length(coef(fit))) {
mle_coef[cur_row + 1, 2 * nbeta - 1] <- coef(fit)[nbeta]
mle_coef[cur_row + 1, 2 * nbeta] <-
summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <- summary(fit)$coefficients[nbeta, 1] -
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 1] <- summary(fit)$coefficients[nbeta, 1] +
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta] <-
(mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <= nbeta / 10) &&
(mle_ci_incl[cur_row + 1, 3 * nbeta - 1] >= nbeta / 10)
}
while (nrow(mle_coef) > nrow(boot_coef)) {
boot_coef_B <-
boot_c_B <- as.data.frame(matrix(NA, nrow = 0, ncol = 2))
b <- 0
b_continue <- TRUE
while (b_continue) {
b <- b + 1
set.seed(b * j)
boot_df <- df[sample(1:n, n, replace = TRUE), ]
boot_fit <- tryCatch({
glm(y ~ x, data = boot_df, family = binomial)
},
error = function(e) {
cat("Bootstrap", b, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("Bootstrap", b, "did not converge, set to NA...\n")
NA
})
if (typeof(boot_fit) == "list") {
boot_coef_B[NROW(boot_coef_B) + 1,] <- coef(boot_fit)
}
if (NROW(boot_coef_B) >= B) {
b_continue <- FALSE
}
}
#detect outlier and remove outlier
boot_cur_row <- nrow(boot_coef)
upper_beta0 <-
mean(boot_coef_B[, 1]) + 2.5 * sqrt(var(boot_coef_B[, 1]))
lower_beta0 <-
mean(boot_coef_B[, 1]) - 2.5 * sqrt(var(boot_coef_B[, 1]))
upper_beta1 <-
mean(boot_coef_B[, 2]) + 2.5 * sqrt(var(boot_coef_B[, 2]))
lower_beta1 <-
mean(boot_coef_B[, 2]) - 2.5 * sqrt(var(boot_coef_B[, 2]))
index <- intersect(which(
(boot_coef_B[, 1] <= upper_beta0) &
(boot_coef_B[, 1] >= lower_beta0)
),
which(
(boot_coef_B[, 2] <= upper_beta1) &
(boot_coef_B[, 2] >= lower_beta1)
))
boot_c_B <- boot_coef_B[index, ]
if (length(index) >= B_0) {
for (b_nbeta in 1:length(coef(fit))) {
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] <-
mean(boot_c_B[1:B_0, b_nbeta])
boot_coef[boot_cur_row + 1, 2 * b_nbeta] <-
sqrt(var(boot_c_B[1:B_0, b_nbeta]))
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.025)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] -
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.975)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] +
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta] <-
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <= nbeta / 10) &&
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] >= nbeta / 10)
}
}
}
cat("MLE", nrow(mle_coef), "finished.\n")
if (nrow(mle_coef) >= k) {
mle_continue <- FALSE
}
}
}
colSums(mle_ci_incl[, c(3, 6)]) / k
colSums(boot_ci_incl[, c(3, 6)]) / k
n <- 20
k <- 200
beta0 <- 0.1
beta1 <- 0.2
B <- 110
B_0 <- 100
z <- qnorm(0.975)
mle_ci_incl <-
boot_ci_incl <- as.data.frame(matrix(NA, nrow = 0, ncol = 6))
names(mle_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
names(boot_ci_incl) <- c(
"beta0_lower",
"beta0_upper",
"beta0_inc",
"beta1_lower",
"beta1_upper",
"beta1_inc"
)
mle_coef <-
boot_coef <-
as.data.frame(matrix(NA, nrow = 0, ncol = 4))
names(mle_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
names(boot_coef) <-
c("beta0_est", "beta0_se", "beta1_est", "beta1_se")
true_betas <-  as.data.frame(matrix(c(rep(0.1, k),
rep(0.2, k)), nrow = k, ncol=2))
j <- 0
mle_continue <- TRUE
while (mle_continue) {
j = j + 1
cat("MLE", j, "the run starting.\n")
set.seed(j %% 9)
x <- rnorm(n)
p <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- c()
for (i in 1:n) {
set.seed(i)
y[i] <- rbinom(1, 1, p[i])
}
df <- data.frame(x, y)
fit <- tryCatch({
glm(y ~ x, data = df, family = binomial)
},
error = function(e) {
cat("MLE", j, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("MLE", j, "did not converge, set to NA...\n")
NA
})
if (typeof(fit) == "list") {
cur_row <- nrow(mle_coef)
for (nbeta in 1:length(coef(fit))) {
mle_coef[cur_row + 1, 2 * nbeta - 1] <- coef(fit)[nbeta]
mle_coef[cur_row + 1, 2 * nbeta] <-
summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <- summary(fit)$coefficients[nbeta, 1] -
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta - 1] <- summary(fit)$coefficients[nbeta, 1] +
z*summary(fit)$coefficients[nbeta, 2]
mle_ci_incl[cur_row + 1, 3 * nbeta] <-
(mle_ci_incl[cur_row + 1, 3 * nbeta - 2] <= nbeta / 10) &&
(mle_ci_incl[cur_row + 1, 3 * nbeta - 1] >= nbeta / 10)
}
while (nrow(mle_coef) > nrow(boot_coef)) {
boot_coef_B <-
boot_c_B <- as.data.frame(matrix(NA, nrow = 0, ncol = 2))
b <- 0
b_continue <- TRUE
while (b_continue) {
b <- b + 1
set.seed(b * j)
boot_df <- df[sample(1:n, n, replace = TRUE), ]
boot_fit <- tryCatch({
glm(y ~ x, data = boot_df, family = binomial)
},
error = function(e) {
cat("Bootstrap", b, "failed, set to NA...\n")
NA
},
warning = function(w) {
cat("Bootstrap", b, "did not converge, set to NA...\n")
NA
})
if (typeof(boot_fit) == "list") {
boot_coef_B[NROW(boot_coef_B) + 1,] <- coef(boot_fit)
}
if (NROW(boot_coef_B) >= B) {
b_continue <- FALSE
}
}
#detect outlier and remove outlier
boot_cur_row <- nrow(boot_coef)
upper_beta0 <-
mean(boot_coef_B[, 1]) + 2.5 * sqrt(var(boot_coef_B[, 1]))
lower_beta0 <-
mean(boot_coef_B[, 1]) - 2.5 * sqrt(var(boot_coef_B[, 1]))
upper_beta1 <-
mean(boot_coef_B[, 2]) + 2.5 * sqrt(var(boot_coef_B[, 2]))
lower_beta1 <-
mean(boot_coef_B[, 2]) - 2.5 * sqrt(var(boot_coef_B[, 2]))
index <- intersect(which(
(boot_coef_B[, 1] <= upper_beta0) &
(boot_coef_B[, 1] >= lower_beta0)
),
which(
(boot_coef_B[, 2] <= upper_beta1) &
(boot_coef_B[, 2] >= lower_beta1)
))
boot_c_B <- boot_coef_B[index, ]
if (length(index) >= B_0) {
for (b_nbeta in 1:length(coef(fit))) {
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] <-
mean(boot_c_B[1:B_0, b_nbeta])
boot_coef[boot_cur_row + 1, 2 * b_nbeta] <-
sqrt(var(boot_c_B[1:B_0, b_nbeta]))
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.025)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] -
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] <-
#quantile(boot_c_B[1:B_0, b_nbeta], 0.975)
boot_coef[boot_cur_row + 1, 2 * b_nbeta - 1] +
z*boot_coef[boot_cur_row + 1, 2 * b_nbeta]
boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta] <-
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 2] <= nbeta / 10) &&
( boot_ci_incl[boot_cur_row + 1, 3 * b_nbeta - 1] >= nbeta / 10)
}
}
}
cat("MLE", nrow(mle_coef), "finished.\n")
if (nrow(mle_coef) >= k) {
mle_continue <- FALSE
}
}
}
