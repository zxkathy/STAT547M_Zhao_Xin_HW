tidy_rob = map(fit_rob, tidy)) %>%
unnest(tidy_ls, tidy_rob)
gap_analysis
gap_analysis %>%
which.max(slope_diff_ratio)
which.max(gap_analysis$slope_diff_ratio)
gap_analysis[which.max(gap_analysis$slope_diff_ratio),]
le_vs_yr <- function(df) {
lm(log(lifeExp) ~ I(year - 1950), data = df)
}
rob_vs_yr <- function(df){
rlm(log(lifeExp) ~ I(year - 1950), data = df)
}
gap_coefs <-
gap_nested %>%
mutate(fit_ls = map(data, le_vs_yr),
fit_rob = map(data, rob_vs_yr)) %>%
mutate(tidy_ls = map(fit_ls, tidy),
tidy_rob = map(fit_rob, tidy)) %>%
unnest(tidy_ls, tidy_rob) %>%
dplyr::select(continent, country,
ls_term = term, ls_est = estimate,
rob_term = term1, rob_est = estimate1)
gap_analysis <-
gap_coefs %>%
spread(key = ls_term, value = ls_est) %>%
mutate(ls_int = lag(`(Intercept)`),
ls_slope = `I(year - 1950)`) %>%
dplyr::select(continent:rob_est, ls_int, ls_slope) %>%
spread(key = rob_term, value = rob_est) %>%
mutate(rob_int = lead(`(Intercept)`),
rob_slope = `I(year - 1950)`)  %>%
dplyr::select(continent:ls_slope, rob_int, rob_slope) %>%
na.omit() %>%
mutate(int_diff_ratio = (rob_int - ls_int)/ls_int,
slope_diff_ratio = (rob_slope - rob_int)/rob_int)
gap_analysis
gapminder$lifeExp
le_vs_yr <- function(df) {
lm(lifeExp ~ I(year - 1950), data = df)
}
rob_vs_yr <- function(df){
rlm(lifeExp ~ I(year - 1950), data = df)
}
gapminder$lifeExp
gap_coefs <-
gap_nested %>%
mutate(fit_ls = map(data, le_vs_yr),
fit_rob = map(data, rob_vs_yr)) %>%
mutate(tidy_ls = map(fit_ls, tidy),
tidy_rob = map(fit_rob, tidy)) %>%
unnest(tidy_ls, tidy_rob) %>%
dplyr::select(continent, country,
ls_term = term, ls_est = estimate,
rob_term = term1, rob_est = estimate1)
gap_analysis <-
gap_coefs %>%
spread(key = ls_term, value = ls_est) %>%
mutate(ls_int = lag(`(Intercept)`),
ls_slope = `I(year - 1950)`) %>%
dplyr::select(continent:rob_est, ls_int, ls_slope) %>%
spread(key = rob_term, value = rob_est) %>%
mutate(rob_int = lead(`(Intercept)`),
rob_slope = `I(year - 1950)`)  %>%
dplyr::select(continent:ls_slope, rob_int, rob_slope) %>%
na.omit() %>%
mutate(int_diff_ratio = (rob_int - ls_int)/ls_int,
slope_diff_ratio = (rob_slope - rob_int)/rob_int)
gap_analysis[which.max(gap_analysis$slope_diff_ratio),]
gap_analysis[which.max(gap_analysis$slope_diff_ratio),]
which.max(gap_analysis$slope_diff_ratio)
gap_analysis$slope_diff_ratio
gap_analysis[which.max(abs(gap_analysis$slope_diff_ratio)),]
gap_analysis <-
gap_coefs %>%
spread(key = ls_term, value = ls_est) %>%
mutate(ls_int = lag(`(Intercept)`),
ls_slope = `I(year - 1950)`) %>%
dplyr::select(continent:rob_est, ls_int, ls_slope) %>%
spread(key = rob_term, value = rob_est) %>%
mutate(rob_int = lead(`(Intercept)`),
rob_slope = `I(year - 1950)`)  %>%
dplyr::select(continent:ls_slope, rob_int, rob_slope) %>%
na.omit() %>%
mutate(int_diff_ratio = (rob_int - ls_int)/ls_int,
slope_diff_ratio = (rob_slope - ls_slope)/ls_slope)
gap_analysis[which.max(abs(gap_analysis$slope_diff_ratio)),]
gap_analysis %>%
arrange(slope_diff_ratio)
gap_analysis %>%
arrange(slope_diff_ratio, desc = T)
gap_analysis %>%
arrange(slope_diff_ratio, descending = T)
?arrange
gap_analysis %>%
arrange(desc(slope_diff_ratio))
gap_analysis %>%
arrange((slope_diff_ratio))
gap_analysis %>%
arrange(desc(slope_diff_ratio))
?singer_locations
singer_locations
singer_locations$city
library(tidyverse)
library(stringr)
library(gapminder)
library(robustbase)
library(dplyr)
library(purrr)
library(repurrrsive)
library(singer)
library(ggmap)
library(tidyverse)
library(broom)
library(MASS)
library(listviewer)
library(leaflet)
paste("a", "b", "c")
paste0("a", "b", "c")
paste(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
paste0(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
str_c("a", "b", "c")
x <- c("a", NA, "c")
paste(x)
str_c(x)
str_c(str_replace_na(x))
str_c(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_")
str_c(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
x <- "abcde"
y <- "abcd"
str_sub(x, (str_length(x)+1)/2, -(str_length(x)+1)/2)
str_sub(y, (str_length(y)+1)/2, -(str_length(y)+1)/2)
x <- "This is my test paragraph, and I can write anything here. "
y <- "That is my second test paragraph, and I just want to see what could happen."
cat(str_c(str_wrap(c(x, y), width = 20, indent = 1, exdent = 3), collapse = "\n"))
str_trim("  string", side = "right")
str_trim("  string", side = "left")
x1 <-  c("ab", "cd", "e", "f")
x2 <-  c("ab", "cd", "e")
x3 <-  c("ab")
turn_string <- function(vector) {
res <- ""
if (length(vector) < 2){
res <- str_c(vector)
}
else if (length(vector) == 2){
res <- str_c(vector[1], vector[2], sep = " and ")
}
else
{
res1 <- str_c(vector[-length(vector)], collapse = ", ")
res2 <- vector[length(vector)]
res <- str_c(res1, res2, sep = " and ")
}
cat(res)
}
turn_string(x1)
turn_string(x2)
turn_string(x3)
y = "\"\'\\"
writeLines(y)
str_view(c(y, "abc"), "\\\"\\'\\\\")
x = "abc.a.b.c"
y = "\\..\\..\\.."
writeLines(y)
str_view(c(y, "abc"), "\\\\..\\\\..\\\\..")
y = "$^$"
writeLines(y)
str_view(c(y, "abc"), "\\$\\^\\$")
rob_reg <- function(input){
if(is.numeric(input)) {
if(!input %in% unique(gapminder$year)){
stop('Gapminder dataset doesn\'t have the year you specified!\n')
}else{
subdat = gapminder %>%
filter(year == input)
fit <- lmrob(lifeExp ~ I(log(gdpPercap)), data = subdat)
return(coef(fit))
}
}
if(is.character(input)){
ctry <- input %>%
str_trim(side = "both") %>%
str_to_lower()
if(!ctry %in% str_to_lower(unique(gapminder$country))){
stop('Gapminder dataset doesn\'t have the country you specified!\n')
}else{
subdat = gapminder %>%
mutate(lower_ctry = str_to_lower(country)) %>%
filter(lower_ctry == ctry)
fit <- lmrob(lifeExp ~ I(log(gdpPercap)), data = subdat)
return(coef(fit))
}
}
else{
stop('Please recheck the format of your input!\n')
}
}
rob_reg(1952)
#rob_reg(2017)
rob_reg("United States")
rob_reg("  canada")
#rob_reg("wonderland")
latlng_address <- function(longi, lati, output = "address") {
revgeocode(c(longi, lati), output = "address")
}
possibly_address <- possibly(latlng_address, "Address not found")
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_loc <-
singer_loc_noNA %>%
head(25) %>%
mutate(addr = unlist(
purrr::map2(longitude, latitude, possibly_address)))
singer_loc_display <-
singer_loc %>%
dplyr::select(city, addr)
singer_loc_display%>%
knitr::kable(digits = 2, align ="r", padding = 10)
find_state_abb <- function(city_name){
state.abb[match(city_name, str_to_lower(state.name))] %>%
str_to_lower()
}
tokenize <- function(string, trim = FALSE) {
if (trim) {
string_trim <- str_trim(sub("^[^,]*,", "", string))
} else {
string_trim <- string
}
string_split <- unlist(str_split(string_trim, boundary("word")))
str_to_lower(string_split)
}
city_state_match <- function(address, city) {
address <- str_to_lower(address)
city <- str_to_lower(city)
is_match <- FALSE
if (str_detect(address, city)) {
is_match <- TRUE
} else {
token_address <- tokenize(address, trim = TRUE)
token_city <- tokenize(city)
token_city_state <- find_state_abb(token_city)
token_city_state <- token_city_state[!is.na(token_city_state)]
new_token_city <- c(token_city, token_city_state)
token_match <- intersect(new_token_city, token_address)
if (length(token_match) != 0) {
is_match <- TRUE
}
}
is_match
}
singer_loc_full <-
singer_loc %>%
mutate(match_or_not =
unlist(map2(addr, city, city_state_match)))
singer_loc_full %>%
dplyr::select(city, addr, match_or_not) %>%
knitr::kable(digits = 2, align ="r", padding = 10)
library(tidyverse)
library(stringr)
library(gapminder)
library(robustbase)
library(dplyr)
library(purrr)
library(repurrrsive)
library(singer)
library(ggmap)
library(tidyverse)
library(broom)
library(MASS)
library(listviewer)
library(leaflet)
paste("a", "b", "c")
paste0("a", "b", "c")
paste(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
paste0(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
str_c("a", "b", "c")
x <- c("a", NA, "c")
paste(x)
str_c(x)
str_c(str_replace_na(x))
str_c(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_")
str_c(rep("student", 4), rep("number", 4), seq(1,4,1), sep = "_", collapse = ", ")
x <- "abcde"
y <- "abcd"
str_sub(x, (str_length(x)+1)/2, -(str_length(x)+1)/2)
str_sub(y, (str_length(y)+1)/2, -(str_length(y)+1)/2)
x <- "This is my test paragraph, and I can write anything here. "
y <- "That is my second test paragraph, and I just want to see what could happen."
cat(str_c(str_wrap(c(x, y), width = 20, indent = 1, exdent = 3), collapse = "\n"))
str_trim("  string", side = "right")
str_trim("  string", side = "left")
x1 <-  c("ab", "cd", "e", "f")
x2 <-  c("ab", "cd", "e")
x3 <-  c("ab")
turn_string <- function(vector) {
res <- ""
if (length(vector) < 2){
res <- str_c(vector)
}
else if (length(vector) == 2){
res <- str_c(vector[1], vector[2], sep = " and ")
}
else
{
res1 <- str_c(vector[-length(vector)], collapse = ", ")
res2 <- vector[length(vector)]
res <- str_c(res1, res2, sep = " and ")
}
cat(res)
}
turn_string(x1)
turn_string(x2)
turn_string(x3)
y = "\"\'\\"
writeLines(y)
str_view(c(y, "abc"), "\\\"\\'\\\\")
x = "abc.a.b.c"
y = "\\..\\..\\.."
writeLines(y)
str_view(c(y, "abc"), "\\\\..\\\\..\\\\..")
y = "$^$"
writeLines(y)
str_view(c(y, "abc"), "\\$\\^\\$")
rob_reg <- function(input){
if(is.numeric(input)) {
if(!input %in% unique(gapminder$year)){
stop('Gapminder dataset doesn\'t have the year you specified!\n')
}else{
subdat = gapminder %>%
filter(year == input)
fit <- lmrob(lifeExp ~ I(log(gdpPercap)), data = subdat)
return(coef(fit))
}
}
if(is.character(input)){
ctry <- input %>%
str_trim(side = "both") %>%
str_to_lower()
if(!ctry %in% str_to_lower(unique(gapminder$country))){
stop('Gapminder dataset doesn\'t have the country you specified!\n')
}else{
subdat = gapminder %>%
mutate(lower_ctry = str_to_lower(country)) %>%
filter(lower_ctry == ctry)
fit <- lmrob(lifeExp ~ I(log(gdpPercap)), data = subdat)
return(coef(fit))
}
}
else{
stop('Please recheck the format of your input!\n')
}
}
rob_reg(1952)
#rob_reg(2017)
rob_reg("United States")
rob_reg("  canada")
#rob_reg("wonderland")
latlng_address <- function(longi, lati, output = "address") {
revgeocode(c(longi, lati), output = "address")
}
possibly_address <- possibly(latlng_address, "Address not found")
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_loc <-
singer_loc_noNA %>%
head(25) %>%
mutate(addr = unlist(
purrr::map2(longitude, latitude, possibly_address)))
library(purrr)
library(repurrrsive)
library(singer)
library(ggmap)
library(leaflet)
latlng_address <- function(longi, lati, output = "address") {
revgeocode(c(longi, lati), output = "address")
}
possibly_address <- possibly(latlng_address, "Address not found")
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_loc_noNA <-
singer_locations
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_locations
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude))
library(dplyr)
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
gap_nested <- gapminder %>%
group_by(continent, country) %>%
nest()
library(gapminder)
library(dplyr)
library(broom)
library(MASS)
gap_nested <- gapminder %>%
group_by(continent, country) %>%
nest()
library(gapminder)
library(dplyr)
library(broom)
library(MASS)
library(listviewer)
gap_nested <- gapminder %>%
group_by(continent, country) %>%
nest()
library(gapminder)
library(dplyr)
library(broom)
library(MASS)
library(stringr)
gap_nested <- gapminder %>%
group_by(continent, country) %>%
nest()
library(gapminder)
library(dplyr)
library(broom)
library(MASS)
library(tidyverse)
gap_nested <- gapminder %>%
group_by(continent, country) %>%
nest()
gap_nested %>% View()
le_vs_yr <- function(df) {
lm(lifeExp ~ I(year - 1950), data = df)
}
rob_vs_yr <- function(df){
rlm(lifeExp ~ I(year - 1950), data = df)
}
gap_coefs <-
gap_nested %>%
mutate(fit_ls = map(data, le_vs_yr),
fit_rob = map(data, rob_vs_yr)) %>%
mutate(tidy_ls = map(fit_ls, tidy),
tidy_rob = map(fit_rob, tidy)) %>%
unnest(tidy_ls, tidy_rob) %>%
dplyr::select(continent, country,
ls_term = term, ls_est = estimate,
rob_term = term1, rob_est = estimate1)
gap_analysis <-
gap_coefs %>%
spread(key = ls_term, value = ls_est) %>%
mutate(ls_int = lag(`(Intercept)`),
ls_slope = `I(year - 1950)`) %>%
dplyr::select(continent:rob_est, ls_int, ls_slope) %>%
spread(key = rob_term, value = rob_est) %>%
mutate(rob_int = lead(`(Intercept)`),
rob_slope = `I(year - 1950)`)  %>%
dplyr::select(continent:ls_slope, rob_int, rob_slope) %>%
na.omit() %>%
mutate(int_diff_ratio = (rob_int - ls_int)/ls_int,
slope_diff_ratio = (rob_slope - ls_slope)/ls_slope)
gap_analysis %>%
arrange(desc(slope_diff_ratio)) %>%
head(10) %>%
knitr::kable(digits = 2, align ="r", padding = 10)
singer_loc
library(purrr)
library(repurrrsive)
library(singer)
library(stringr)
library(ggmap)
library(leaflet)
library(dplyr)
latlng_address <- function(longi, lati, output = "address") {
revgeocode(c(longi, lati), output = "address")
}
possibly_address <- possibly(latlng_address, "Address not found")
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_loc <-
singer_loc_noNA %>%
head(25) %>%
mutate(addr = unlist(
purrr::map2(longitude, latitude, possibly_address)))
singer_loc_display <-
singer_loc %>%
head(15)%>%
dplyr::select(title, artist_name, artist_hottnesss, city, addr)
singer_loc
latlng_address <- function(longi, lati, output = "address") {
revgeocode(c(longi, lati), output = "address")
}
possibly_address <- possibly(latlng_address, "Address not found")
singer_loc_noNA <-
singer_locations %>%
filter(!is.na(latitude), !is.na(longitude))
singer_loc <-
singer_loc_noNA %>%
head(25) %>%
mutate(addr = unlist(
purrr::map2(longitude, latitude, possibly_address)))
singer_loc_display <-
singer_loc %>%
head(15)%>%
dplyr::select(title, artist_name, artist_hotttnesss, city, addr)
singer_loc_display%>%
knitr::kable(digits = 2, align ="r", padding = 10)
cities <- singer_loc_noNA %>%
dplyr::select(city, latitude, longitude, artist_hotttnesss)
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~artist_hotttnesss * 3000, popup = ~city
)
